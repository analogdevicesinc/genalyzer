#!/usr/bin/env python
# SPDX-License-Identifier: LGPL-2.1-or-later
#
# Copyright (C) 2022 Analog Devices, Inc.
# Author: Srikanth Pagadarai <srikanth.pagadarai@analog.com>

from setuptools import setup, find_packages
from setuptools.command.install import install

config = dict(long_description_content_type="text/markdown")

description = "Library to compute data-converter performance metrics"

try:
    with open("${CMAKE_CURRENT_SOURCE_DIR}/README.md", "r") as fh:
        long_description = fh.read()
except:
    long_description = description


def find_recursive(folder, filename):
    import os

    for root, dirs, files in os.walk(folder):
        for file in files:
            if file == filename:
                return os.path.join(root, file)


class InstallWrapper(install):
    """Before installing we check if the
    libgenalyzer library is actually installed"""

    def run(self):
        self._check_libgenalyzer_installed()
        # Run the standard PyPi copy
        install.run(self)

    def _check_libgenalyzer_installed(self):
        lib_check = ("${LIB_CHECK_PYINSTALL}" == "OFF")
        if lib_check:
            # When cross-compiling or installing from git, we genalyzererally cannot
            # dlopen the libgenalyzer shared lib from the build platform.
            # Simply skip this check in that case.
            return

        from platform import system as _system
        from ctypes import CDLL as _cdll
        from ctypes.util import find_library

        if "Windows" in _system():
            _genalyzerlib = "libgenalyzer.dll"
        else:
            # Non-windows, possibly Posix system
            _genalyzerlib = "genalyzer"
        try:
            import os

            destdir = os.getenv("DESTDIR", "")
            if destdir:
                destdir = os.path.join("${CMAKE_BINARY_DIR}", destdir)
                fulllibpath = find_recursive(destdir, "libgenalyzer.so")
                _lib = _cdll(fulllibpath, use_errno=True, use_last_error=True)
            else:
                _lib = _cdll(find_library(_genalyzerlib), use_errno=True, use_last_error=True)
            if not _lib._name:
                raise OSError
        except OSError:
            msg = "The libgenalyzer library could not be found.\n\
            libgenalyzer needs to be installed first before the python bindings.\n\
            The latest release can be found on GitHub:\n\
            https://github.com/analogdevicesinc/genalyzer/releases"
            raise Exception(msg)


config.update(
    dict(
        name="pylibgenalyzer",
        version="${CMAKE_PROJECT_VERSION}",
        maintainer="Analog Devices, Inc",
        maintainer_email="srikanth.pagadarai@analog.com",
        description=description,
        long_description=long_description,
        url="https://github.com/analogdevicesinc/genalyzer",
        py_modules=["genalyzer","genalyzer_advanced"],
        packages=find_packages(exclude=["test*"]),
        python_requires=">=3.6",
        cmdclass={"install": InstallWrapper},
        classifiers=[
            "Programming Language :: Python :: 3",
            "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
            "Operating System :: OS Independent",
        ],
    )
)


setup(**config)
