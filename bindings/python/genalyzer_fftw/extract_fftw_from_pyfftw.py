#!/usr/bin/env python3
"""
Extract FFTW libraries bundled in pyFFTW wheel package.
PyFFTW wheels from PyPI bundle FFTW libraries using delocate/auditwheel.
This script locates and exposes those libraries for building genalyzer.
"""

import os
import sys
import sysconfig
from pathlib import Path
import platform


def find_fftw_in_pyfftw():
    """Find FFTW library files bundled in the installed pyFFTW package."""
    try:
        import pyfftw
    except ImportError:
        print("ERROR: pyfftw not found. Install with: pip install pyfftw")
        return None, None, None

    pyfftw_dir = Path(pyfftw.__file__).parent
    print(f"PyFFTW package location: {pyfftw_dir}")

    # Determine library extensions based on platform
    system = platform.system()
    if system == "Windows":
        lib_pattern = "*.dll"
        lib_extensions = [".dll", ".lib"]
    elif system == "Darwin":
        lib_pattern = "*.dylib"
        lib_extensions = [".dylib"]
    else:  # Linux
        lib_pattern = "*.so*"
        lib_extensions = [".so"]

    # PyFFTW wheels bundle libraries in various directories depending on platform and version
    lib_dirs = []

    # Check common locations where delocate/auditwheel place bundled libraries
    possible_lib_dirs = [
        pyfftw_dir / ".libs",  # Linux (auditwheel) - older style, inside package
        pyfftw_dir.parent / "pyFFTW.libs",  # Linux (auditwheel) - newer style, sibling to package
        pyfftw_dir / ".dylibs",  # macOS (delocate)
        pyfftw_dir,  # Windows or fallback
    ]

    for lib_dir in possible_lib_dirs:
        if lib_dir.exists():
            lib_dirs.append(lib_dir)

    # Search for FFTW libraries
    fftw_libs = []
    fftw_headers = []

    print("\nSearching for FFTW libraries...")
    for lib_dir in lib_dirs:
        print(f"  Checking: {lib_dir}")
        for ext in lib_extensions:
            found = list(lib_dir.glob(f"*fftw3*{ext}*"))
            if found:
                fftw_libs.extend(found)
                print(f"    Found {len(found)} FFTW library file(s)")

    # Also check for header files (though wheels typically don't include them)
    print("\nSearching for FFTW headers...")
    header_file = pyfftw_dir / "fftw3.h"
    if header_file.exists():
        fftw_headers.append(header_file)
        print(f"  Found: {header_file}")

    # Try to find headers in include directories
    for inc_dir in [pyfftw_dir / "include", pyfftw_dir.parent / "include"]:
        if inc_dir.exists():
            headers = list(inc_dir.glob("fftw3*.h"))
            if headers:
                fftw_headers.extend(headers)
                print(f"  Found {len(headers)} header(s) in {inc_dir}")

    if not fftw_libs:
        print("\nWARNING: No FFTW library files found in pyFFTW package!")
        print("This might mean:")
        print("1. pyFFTW was built from source and doesn't bundle FFTW")
        print("2. You need to install a pre-built wheel: pip install --force-reinstall pyfftw")
        return None, None, None

    # Determine library directory (use first one with libs)
    lib_dir = fftw_libs[0].parent if fftw_libs else None
    include_dir = fftw_headers[0].parent if fftw_headers else None

    print(f"\nSummary:")
    print(f"  Library directory: {lib_dir}")
    print(f"  Include directory: {include_dir}")
    print(f"  Found {len(fftw_libs)} FFTW library file(s):")
    for lib in fftw_libs:
        print(f"    - {lib.name}")

    return str(lib_dir) if lib_dir else None, \
           str(include_dir) if include_dir else None, \
           [str(lib) for lib in fftw_libs]


def create_cmake_config(lib_dir, include_dir):
    """Create a CMake configuration file with FFTW paths from pyFFTW."""
    config_file = Path(__file__).parent / "fftw_from_pyfftw.cmake"

    with open(config_file, "w") as f:
        f.write("# Auto-generated FFTW configuration from pyFFTW wheel\n")
        f.write("# This file is generated by extract_fftw_from_pyfftw.py\n\n")

        if lib_dir:
            f.write(f'set(FFTW_ROOT "{Path(lib_dir).parent}")\n')
            f.write(f'set(FFTW_LIBRARY_DIR "{lib_dir}")\n')

        if include_dir:
            f.write(f'set(FFTW_INCLUDE_DIRS "{include_dir}")\n')
        else:
            # If no headers in pyFFTW, we need to download them
            f.write('# Note: FFTW headers not found in pyFFTW wheel\n')
            f.write('# You may need to download fftw3.h separately\n')

        # Add library search hints for FindFFTW.cmake
        if lib_dir:
            f.write(f'\nset(CMAKE_PREFIX_PATH "{lib_dir}" "${{CMAKE_PREFIX_PATH}}")\n')
            f.write(f'link_directories("{lib_dir}")\n')

    print(f"\nCMake configuration written to: {config_file}")
    print(f"\nTo use in CMake build:")
    print(f"  cmake -C {config_file} ..")

    return config_file


def main():
    """Main entry point."""
    print("=" * 70)
    print("Extracting FFTW from pyFFTW wheel")
    print("=" * 70)

    lib_dir, include_dir, lib_files = find_fftw_in_pyfftw()

    if lib_dir:
        config_file = create_cmake_config(lib_dir, include_dir)

        # Also print environment variables that can be used
        print("\nAlternatively, set these environment variables:")
        print(f"  export FFTW_ROOT={Path(lib_dir).parent}")
        if lib_dir:
            print(f"  export LD_LIBRARY_PATH={lib_dir}:$LD_LIBRARY_PATH  # Linux")
            print(f"  export DYLD_LIBRARY_PATH={lib_dir}:$DYLD_LIBRARY_PATH  # macOS")

        return 0
    else:
        print("\nERROR: Could not find FFTW libraries in pyFFTW package")
        print("\nTry reinstalling pyFFTW wheel:")
        print("  pip uninstall pyfftw")
        print("  pip install pyfftw")
        return 1


if __name__ == "__main__":
    sys.exit(main())
